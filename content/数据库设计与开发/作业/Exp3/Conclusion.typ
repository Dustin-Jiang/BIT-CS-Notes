= 实验结论

通过本次数据库物理设计实验，我得出了以下几点结论：

1. *数据分区表*：分区表能有效地将大量数据分散存储，提高查询和管理效率。根据实验观察，按范围分区是处理时序数据（如按年份划分的学生信息）的有效策略。

2. *主键与外键约束*：
   - 修改或删除被外键引用的主键数据需要特别小心。如果没有设置合适的级联操作，数据库会拒绝执行违反引用完整性的操作。
   - 使用 `ON UPDATE CASCADE` 和 `ON DELETE CASCADE` 选项可以自动维护引用完整性，避免手动处理依赖关系的繁琐步骤。
   - 当涉及复杂的关系结构时，必须按照依赖关系的逆序进行删除操作。

3. *索引的重要性*：
   - 实验证明索引对查询性能的影响是巨大的。在含有10万条记录的表上，有索引的查询比无索引查询快约900倍。
   - 通过 `EXPLAIN` 命令分析，可以看到有索引时数据库使用 Bitmap Heap Scan 等高效的查询方式，而无索引时只能使用 Sequential Scan。
   - 索引的效果随数据量增加而更加显著，对大规模数据库系统尤为重要。

4. *子查询在数据操作中的应用*：使用子查询可以实现复杂的数据筛选和操作，提高SQL语句的表达能力和灵活性。

= 实验体会

本次实验让我深入理解了数据库物理设计的重要性和复杂性。以下是我的主要体会：

1. *数据库性能优化的关键*：物理设计直接影响数据库的性能。合理的索引设计、表分区策略和约束定义能显著提升查询效率，尤其在大规模数据环境下。

2. *权衡与取舍*：数据库设计涉及多方面的权衡。例如，添加索引提高查询性能，但会占用存储空间并可能降低写入性能；CASCADE操作简化了数据管理，但可能导致意外的大规模数据删除。

3. *实验与验证的重要性*：理论知识需要通过实验验证和巩固。例如，索引对性能的影响虽然在理论上清晰，但通过实际测量两种情况下的查询时间，我对索引的重要性有了更直观的认识。

4. *数据完整性与业务逻辑*：数据库约束（如外键）不仅是技术实现，也反映了业务规则和数据完整性要求。合理设计约束可以防止错误数据的产生。
