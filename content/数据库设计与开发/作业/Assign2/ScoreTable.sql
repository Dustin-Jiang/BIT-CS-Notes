DROP TABLE IF EXISTS score;
CREATE TABLE score (
  id VARCHAR(20) NOT NULL,  -- 学生ID，外键引用学生表的ID字段
  subject_name VARCHAR(20) NOT NULL,  -- 科目名称
  score NUMERIC(5,2) NOT NULL,  -- 成绩，数值类型，最多5位数字和2位小数
  PRIMARY KEY (id, subject_name),  -- 主键由学生ID和科目名称组成，确保唯一性
  FOREIGN KEY (id) REFERENCES student(id)  -- 外键约束，引用学生表的ID字段
);

INSERT INTO score (id, subject_name, score) VALUES
-- 2009年的学生
('1120090001', '数据库设计与开发', 85.0),
('1120090001', '软件工程导论', 90.0),
('1120090001', '科学发展观', 88.0),
('1120090002', '数据库设计与开发', 78.0),
('1120090002', '软件工程导论', 88.0),
('1120090002', '科学发展观', 88.0),
('1120090003', '数据库设计与开发', 92.0),
('1120090003', '软件工程导论', 95.0),
('1120090003', '科学发展观', 90.0),
('1120090004', '数据库设计与开发', 80.0),
('1120090004', '软件工程导论', 85.0),
('1120090004', '科学发展观', 82.0),
-- 2000年的学生
('1120000001', '数据库设计与开发', 75.0),
('1120000001', '软件工程导论', 80.0),
('1120000001', '三个代表重要思想', 85.0),
('1120000002', '数据库设计与开发', 82.0),
('1120000002', '软件工程导论', 78.0),
('1120000002', '三个代表重要思想', 80.0),
('1120000003', '数据库设计与开发', 88.0),
('1120000003', '软件工程导论', 90.0),
('1120000003', '三个代表重要思想', 92.0),
('1120000004', '数据库设计与开发', 70.0),
('1120000004', '软件工程导论', 72.0),
('1120000004', '三个代表重要思想', 75.0),
-- 2015年的学生
('1120150001', '数据库设计与开发', 95.0),
('1120150001', '软件工程导论', 98.0),
('1120150001', '习近平新时代中国特色社会主义思想概论', 90.0),
('1120150002', '数据库设计与开发', 85.0),
('1120150002', '软件工程导论', 87.0),
('1120150002', '习近平新时代中国特色社会主义思想概论', 88.0),
('1120150003', '数据库设计与开发', 90.0),
('1120150003', '软件工程导论', 92.0),
('1120150003', '习近平新时代中国特色社会主义思想概论', 91.0),
('1120150004', '数据库设计与开发', 88.0),
('1120150004', '软件工程导论', 91.0),
('1120150004', '习近平新时代中国特色社会主义思想概论', 75.0),
-- 在校生
('1120240001', '数据库设计与开发', 80.0),
('1120240001', '软件工程导论', 85.0),
('1120240001', '习近平新时代中国特色社会主义思想概论', 82.0);

CREATE OR REPLACE FUNCTION get_student_scores()
RETURNS SETOF record AS $$
DECLARE
  cols TEXT;          -- 动态生成的列定义
  sql TEXT;           -- 动态生成的完整 SQL 语句
BEGIN
  -- 获取所有科目名称，并生成 CASE 表达式
  SELECT string_agg(
    format(
      'MAX(CASE WHEN subject_name = %L THEN score END) AS %I',
      subject_name, subject_name
    ),
    ', '
  ) INTO cols
  FROM (
    SELECT DISTINCT subject_name
    FROM score
    ORDER BY subject_name
  ) AS subjects;

  -- 如果没有科目，仅返回学生姓名
  IF cols IS NULL THEN
    sql := 'SELECT name FROM student';
  ELSE
    -- 构造完整的 SQL 查询
    sql := format(
      'SELECT s.name, %s 
        FROM student s 
        LEFT JOIN score sc ON s.id = sc.id 
        GROUP BY s.name, s.id',
      cols
    );
  END IF;

  -- 执行动态查询
  RETURN QUERY EXECUTE sql;
END;
$$ LANGUAGE plpgsql;