#let show-mainbody(body) = {
  set text(font: ("IBM Plex Sans", "Source Han Sans"), hyphenate: false)

  set par(
    leading: 1.15em,
    first-line-indent: (
      amount: 2em,
      all: true,
    ),
    justify: true,
  )

  show heading.where(level: 2): it => {
    set block(
      above: 1.5em,
      below: 1em,
    )
    it
  }

  body
}

#show: show-mainbody;

= 数据库设计与开发 实验加分申请

#block(
  table(
    columns: (1fr, 1fr, 1fr),
    stroke: none,
    [08012301], [蒋浩天], [1120231337],
  ),
  width: 60%,
)

== 实验一

在实验一中, 创新地使用了 Docker 和 Docker Compose 工具来容器化地部署 OpenGauss 数据库。

容器化是一种轻量级的虚拟化技术，它将应用及其依赖项打包到一个独立的单元中，这个单元被称为容器。容器与主机操作系统共享内核，因此比传统的虚拟机更轻量级、更快速。

Docker 是一个开源的应用容器引擎，它基于 Linux 的容器技术，可以将应用及其依赖打包到一个可移植的镜像中，然后发布到任何支持 Docker 的环境中。

#linebreak()

这样做的优势在于: 

  - 提高资源利用率：容器与主机操作系统共享内核，因此比传统的虚拟机更轻量级，可以更有效地利用系统资源。
  - 简化部署：容器将应用及其依赖项打包到一个独立的单元中，可以轻松地在不同的环境中部署。
  - 提高可移植性：容器可以在任何支持 Docker 的环境中运行，从而提高了应用的可移植性。
  - 提高开发效率：容器可以隔离不同的应用，从而避免了应用之间的冲突，提高了开发效率。

#linebreak()

*创新点在于: *
1. 采用现代化的容器技术进行数据库部署，相比传统的直接安装方式更加灵活
2. 使用 Docker Compose 实现了数据库环境的一键部署，大大简化了配置流程
3. 通过容器化实现了开发环境的标准化，确保了实验环境的一致性
4. 为后续的数据库运维和管理提供了更好的基础架构支持

== 实验二

在实验二中, 在使用 PuTTY, Data Studio 工具连接数据库之外, 创新地使用了 Cloudbeaver 这一基于 Web 的数据库管理工具访问、管理 OpenGauss 数据库。其优势在于: 

- 跨平台: Cloudbeaver 可以在任何支持 Web 浏览器的操作系统上运行。
- 多数据库支持: Cloudbeaver 支持 JDBC 连接, 因此支持包括 MySQL, PostgreSQL, MariaDB, SQL Server, Oracle, DB2, _*OpenGauss*_ 等多种数据库。
- Web界面: 通过 Web 界面进行数据库管理，无需安装客户端。
- 数据浏览与编辑: 允许用户浏览数据库中的表、视图、存储过程等对象，并进行数据的编辑。
- SQL编辑器: 提供 SQL 编辑器，支持语法高亮、自动补全等功能。
- 数据导出: 支持将数据导出为多种格式，如 CSV, Excel, JSON 等。

#linebreak()

Cloudbeaver 适用于需要通过 Web 界面管理数据库的场景，例如：

- 远程数据库管理
- 团队协作开发
- 云环境下的数据库管理

#linebreak()

*创新点在于:*
1. 采用现代化的 Web 技术进行数据库管理，突破传统客户端工具的限制
2. 通过浏览器实现跨平台访问，提高了数据库管理的便捷性
3. 支持多种数据库系统，为后续扩展提供了可能性
4. 基于云原生架构，更适合现代分布式系统的开发和管理需求

== 实验三

在实验三中, 通过创建测试表, 进行大量测试查询的方式来直观展现索引对数据库查询效率的显著影响. 

实验表明, 有索引的情况下100000次查询用时仅需2秒, 而没有索引的情况下用时超过了30分钟. 从实验结果可以明显看出, 有索引的查询效率显著高于没有索引的查询效率. 这说明了索引在数据库查询中的重要性, 在数据量较大的情况下, 索引可以显著提高查询效率.

#linebreak()

*创新点在于:*
1. 采用大规模查询测试 (100000次) 来量化索引性能提升
2. 通过对比实验直观展示索引对查询效率的影响
3. 基于实际测试数据进行性能分析，而非仅停留在理论层面
4. 为数据库优化决策提供了量化的依据支持

== 实验四

在实验四中, 成功使用触发器完成了要求的任务. 在创建触发器时, 将触发器的主体剥离为函数, 包含对主键和外键的检查逻辑, 而触发器的主体中仅有对函数的调用. 

#linebreak()

*创新点在于:*
1. 使得触发器逻辑更加清晰; 
2. 相同逻辑之间代码得到重用;
3. 触发器代码更易于维护. 